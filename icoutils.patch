diff --git a/3rdparty/ext_icoutils/0003-Add-prototype-args-to-function-pointer.patch b/3rdparty/ext_icoutils/0003-Add-prototype-args-to-function-pointer.patch
new file mode 100644
index 0000000000..0fa32e81a6
--- /dev/null
+++ b/3rdparty/ext_icoutils/0003-Add-prototype-args-to-function-pointer.patch
@@ -0,0 +1,134 @@
+From d5134c36447cf9f22198fbfa5af9278ef7bec94e Mon Sep 17 00:00:00 2001
+From: Alvin Wong <alvinhochun@gmail.com>
+Date: Wed, 7 Sep 2022 20:30:32 +0800
+Subject: [PATCH] Add prototype args to function pointer
+
+---
+ common/hmap.c  | 4 ++--
+ common/hmap.h  | 4 ++--
+ common/llist.c | 2 +-
+ common/llist.h | 2 +-
+ common/tmap.c  | 8 ++++----
+ common/tmap.h  | 4 ++--
+ 6 files changed, 12 insertions(+), 12 deletions(-)
+
+diff --git a/common/hmap.c b/common/hmap.c
+index 9c5d657..8b77205 100644
+--- a/common/hmap.c
++++ b/common/hmap.c
+@@ -363,7 +363,7 @@ hmap_iterator(HMap *map, HMapIterator *it)
+  * function. But no other entry.
+  */
+ void
+-hmap_foreach_value(HMap *map, void (*iterator)())
++hmap_foreach_value(HMap *map, void (*iterator)(void *))
+ {
+     uint32_t c;
+ 
+@@ -378,7 +378,7 @@ hmap_foreach_value(HMap *map, void (*iterator)())
+ }
+ 
+ void
+-hmap_foreach_key(HMap *map, void (*iterator)())
++hmap_foreach_key(HMap *map, void (*iterator)(void *))
+ {
+     uint32_t c;
+ 
+diff --git a/common/hmap.h b/common/hmap.h
+index bf6684b..a124b53 100644
+--- a/common/hmap.h
++++ b/common/hmap.h
+@@ -50,8 +50,8 @@ void *hmap_put(HMap *map, void *key, void *value);
+ bool hmap_contains_key(HMap *map, const void *key);
+ void *hmap_remove(HMap *map, const void *key);
+ void hmap_iterator(HMap *map, HMapIterator *it);
+-void hmap_foreach_key(HMap *map, void (*iterator)());
+-void hmap_foreach_value(HMap *map, void (*iterator)());
++void hmap_foreach_key(HMap *map, void (*iterator)(void *));
++void hmap_foreach_value(HMap *map, void (*iterator)(void *));
+ void hmap_clear(HMap *map);
+ size_t hmap_size(HMap *map);
+ void hmap_set_hash_fn(HMap *map, hash_fn_t hash);
+diff --git a/common/llist.c b/common/llist.c
+index 873f36c..d65438d 100644
+--- a/common/llist.c
++++ b/common/llist.c
+@@ -445,7 +445,7 @@ llist_is_empty(LList *list)
+ }
+ 
+ void
+-llist_iterate(LList *list, void (*iterator_func)())
++llist_iterate(LList *list, void (*iterator_func)(void *))
+ {
+ 	LNode *entry;
+ 	for (entry = list->first; entry != NULL; entry = entry->next)
+diff --git a/common/llist.h b/common/llist.h
+index 11d13a3..a2bf77b 100644
+--- a/common/llist.h
++++ b/common/llist.h
+@@ -68,7 +68,7 @@ LList *llist_clone(LList *list);
+ void **llist_to_array(LList *list);
+ void **llist_to_null_terminated_array(LList *list);
+ 
+-void llist_iterate(LList *list, void (*iterator_func)());
++void llist_iterate(LList *list, void (*iterator_func)(void *));
+ void llist_iterator(LList *list, LListIterator *it);
+ 
+ void llist_reverse(LList *list);
+diff --git a/common/tmap.c b/common/tmap.c
+index bdbd0e3..1512c7c 100644
+--- a/common/tmap.c
++++ b/common/tmap.c
+@@ -512,7 +512,7 @@ predecessor(TMapNode *node)
+ #endif
+ 
+ static void
+-tmap_foreach_nodes_key(TMapNode *node, void (*iterator)())
++tmap_foreach_nodes_key(TMapNode *node, void (*iterator)(void *))
+ {
+     if (node->left != &nil)
+     	tmap_foreach_nodes_key(node->left, iterator);
+@@ -522,7 +522,7 @@ tmap_foreach_nodes_key(TMapNode *node, void (*iterator)())
+ }
+ 
+ static void
+-tmap_foreach_nodes_value(TMapNode *node, void (*iterator)())
++tmap_foreach_nodes_value(TMapNode *node, void (*iterator)(void *))
+ {
+     if (node->left != &nil)
+     	tmap_foreach_nodes_value(node->left, iterator);
+@@ -532,14 +532,14 @@ tmap_foreach_nodes_value(TMapNode *node, void (*iterator)())
+ }
+ 
+ void
+-tmap_foreach_key(TMap *map, void (*iterator)())
++tmap_foreach_key(TMap *map, void (*iterator)(void *))
+ {
+     if (map->root != &nil)
+ 	tmap_foreach_nodes_key(map->root, iterator);
+ }
+ 
+ void
+-tmap_foreach_value(TMap *map, void (*iterator)())
++tmap_foreach_value(TMap *map, void (*iterator)(void *))
+ {
+     if (map->root != &nil)
+ 	tmap_foreach_nodes_value(map->root, iterator);
+diff --git a/common/tmap.h b/common/tmap.h
+index b1368f8..e3e422d 100644
+--- a/common/tmap.h
++++ b/common/tmap.h
+@@ -51,8 +51,8 @@ void *tmap_remove(TMap *map, const void *key);
+ void tmap_iterator(TMap *map, TMapIterator *it); /* value iterator */
+ bool tmap_iterator_partial(TMap *map, TMapIterator *it, const void *match, comparison_fn_t comparator);
+ void tmap_clear(TMap *map);
+-void tmap_foreach_key(TMap *map, void (*iterator)());
+-void tmap_foreach_value(TMap *map, void (*iterator)());
++void tmap_foreach_key(TMap *map, void (*iterator)(void *));
++void tmap_foreach_value(TMap *map, void (*iterator)(void *));
+ 
+ #ifdef ENABLE_TMAP_TESTING
+ #include <stdio.h>
+-- 
+2.24.1.windows.2
+
diff --git a/3rdparty/ext_icoutils/CMakeLists.txt b/3rdparty/ext_icoutils/CMakeLists.txt
index 67608bf5a9..efbcbce198 100644
--- a/3rdparty/ext_icoutils/CMakeLists.txt
+++ b/3rdparty/ext_icoutils/CMakeLists.txt
@@ -10,6 +10,7 @@ if (MINGW)
 
         PATCH_COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0001-Really-do-not-include-libintl.h.patch
               COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0002-CMake-to-build-icotool.exe.patch
+              COMMAND ${PATCH_COMMAND} -p1 -i ${CMAKE_CURRENT_SOURCE_DIR}/0003-Add-prototype-args-to-function-pointer.patch
         CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${PREFIX_ext_icoutils} -DCMAKE_BUILD_TYPE=${GLOBAL_BUILD_TYPE} ${GLOBAL_PROFILE}
 
         DEPENDS ext_png
